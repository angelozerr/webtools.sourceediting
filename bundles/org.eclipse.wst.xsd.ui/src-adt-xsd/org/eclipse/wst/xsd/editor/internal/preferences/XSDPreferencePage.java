/*******************************************************************************
 * Copyright (c) 2001, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.wst.xsd.editor.internal.preferences;

import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;
import org.eclipse.wst.xsd.editor.XSDEditorPlugin;

public class XSDPreferencePage extends PreferencePage implements IWorkbenchPreferencePage, Listener
{
  Text indentTextField;
  String indentString;
  Text schemaNsPrefixField;
  Text defaultTargetNamespaceText;
  Button qualifyXSDLanguage;

  Button showInheritedContent;

  /**
   * Creates preference page controls on demand.
   * 
   * @param parent
   *          the parent for the preference page
   */
  protected Control createContents(Composite parent)
  {
    Group group = createGroup(parent, 2);
    group.setText("Settings");

    showInheritedContent = createCheckBox(group, "Show inherited content in complex types");
    createLabel(group, " ");

    initializeValues();

    return new Composite(parent, SWT.NULL);
  }

  private Group createGroup(Composite parent, int numColumns)
  {
    Group group = new Group(parent, SWT.NULL);

    GridLayout layout = new GridLayout();
    layout.numColumns = numColumns;
    group.setLayout(layout);

    GridData data = new GridData();
    data.verticalAlignment = GridData.FILL;
    data.horizontalAlignment = GridData.FILL;
    data.grabExcessHorizontalSpace = true;
    group.setLayoutData(data);

    return group;
  }

  private Text createTextField(Composite parent)
  {
    Text text = new Text(parent, SWT.SINGLE | SWT.BORDER);
    GridData data = new GridData();
    data.verticalAlignment = GridData.FILL;
    data.horizontalAlignment = GridData.FILL;
    data.grabExcessHorizontalSpace = true;
    text.setLayoutData(data);

    return text;
  }

  private Label createLabel(Composite parent, String text)
  {
    Label label = new Label(parent, SWT.LEFT);
    label.setText(text);

    GridData data = new GridData();
    data.verticalAlignment = GridData.CENTER;
    data.horizontalAlignment = GridData.FILL;
    label.setLayoutData(data);

    return label;
  }

  private Button createCheckBox(Composite parent, String label)
  {
    Button button = new Button(parent, SWT.CHECK);
    button.setText(label);

    GridData data = new GridData();
    data.horizontalAlignment = GridData.FILL;
    button.setLayoutData(data);
    return button;
  }

  /**
   * Does anything necessary because the default button has been pressed.
   */
  protected void performDefaults()
  {
    super.performDefaults();
    initializeDefaults();
    checkValues();
  }

  /**
   * Do anything necessary because the OK button has been pressed.
   * 
   * @return whether it is okay to close the preference page
   */
  public boolean performOk()
  {
    if (checkValues())
    {
      storeValues();
      return true;
    }
    return false;
  }

  protected void performApply()
  {
    if (checkValues())
    {
      storeValues();
    }
  }

  /**
   * Handles events generated by controls on this page.
   * 
   * @param e
   *          the event to handle
   */
  public void handleEvent(Event e)
  {
  }

  /**
   * @see IWorkbenchPreferencePage
   */
  public void init(IWorkbench workbench)
  {
  }

  /**
   * The indent is stored in the preference store associated with the XML Schema
   * Model
   */
  public IPreferenceStore getPreferenceStore()
  {
    return XSDEditorPlugin.getPlugin().getPreferenceStore();
  }

  /**
   * Initializes states of the controls using default values in the preference
   * store.
   */
  private void initializeDefaults()
  {
    showInheritedContent.setSelection(getPreferenceStore().getDefaultBoolean(XSDEditorPlugin.CONST_SHOW_INHERITED_CONTENT));

  }

  /**
   * Initializes states of the controls from the preference store.
   */
  private void initializeValues()
  {
    IPreferenceStore store = getPreferenceStore();
    showInheritedContent.setSelection(store.getBoolean(XSDEditorPlugin.CONST_SHOW_INHERITED_CONTENT));
  }

  /**
   * Stores the values of the controls back to the preference store.
   */
  private void storeValues()
  {
    IPreferenceStore store = getPreferenceStore();

    store.setValue(XSDEditorPlugin.CONST_SHOW_INHERITED_CONTENT, getShowInheritedContent());

    XSDEditorPlugin.getPlugin().savePluginPreferences();
  }

  public boolean getShowInheritedContent()
  {
    return showInheritedContent.getSelection();
  }

  public boolean checkValues()
  {
    return true;
  }
}
